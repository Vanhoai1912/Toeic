@model Toeic.Models.ViewModels.TracNghiemViewModel

<div class="col-12 text-center">
    <h2>@Model.Baithi.Tieu_de</h2>
</div>
<div class="container rounded-4" style="max-width: 1220px;box-shadow: 0 2px 4px rgba(0, 0, 0, .08), 0 4px 12px rgba(0, 0, 0, .08);margin-left: -6rem;">
    <div class="row">
        <p class="mt-xxl-3">
            <span class="badge rounded-4 bg-primary">
                Part 1
            </span>
            <span class="badge rounded-4 bg-primary">
                Part 2
            </span>
            <span class="badge rounded-4 bg-primary">
                Part 3
            </span>
            <span class="badge rounded-4 bg-primary">
                Part 4
            </span>  
            <span class="badge rounded-4 bg-primary">
                Part 5
            </span> 
            <span class="badge rounded-4 bg-primary">
                Part 6
            </span>  
            <span class="badge rounded-4 bg-primary">
                Part 7
            </span>  
           
        </p>
        <div class="col-md-8">
            <form asp-action="ResultDetail" method="post" id="tracNghiemForm">
                <input type="hidden" name="baiTapId" value="@Model.Baithi.Id" />
                @{
                    // Khởi tạo một danh sách để lưu trữ các tên ảnh đã hiển thị
                    List<string> displayedImages = new List<string>();
                }
                @for (int i = 0; i < Model.CauHoiBaiThiList.Count; i++)
                {
                    <div class="question-block" id="question_@Model.CauHoiBaiThiList[i].Id" style="padding: 10px;">

                        @if (!string.IsNullOrEmpty(Model.CauHoiBaiThiList[i].Audio))
                        {
                            <hr />

                            <div class="box-audio mb-3">
                                <audio controls class=" w-100">
                                    <source src="~/@Model.CauHoiBaiThiList[i].Audio" type="audio/mpeg" />
                                </audio>
                            </div>
                        }
                       
                        @* Hiển thị hình ảnh nếu có và nếu chưa được hiển thị *@
                        @if (!string.IsNullOrEmpty(Model.CauHoiBaiThiList[i].Image) && !displayedImages.Contains(Model.CauHoiBaiThiList[i].Image))
                        {
                            displayedImages.Add(Model.CauHoiBaiThiList[i].Image);

                            <hr />

                            <div class="box-image w-75 h-50">
                                <img src="~/@Model.CauHoiBaiThiList[i].Image" alt="Question Image" />
                            </div>
                        }
                        <p><b>@Model.CauHoiBaiThiList[i].Thu_tu_cau. @Model.CauHoiBaiThiList[i].Cau_hoi</b></p>
                        @{
                            var options = new[]
                            {
                    new { Letter = "A", Text = Model.CauHoiBaiThiList[i].Dap_an_1 },
                    new { Letter = "B", Text = Model.CauHoiBaiThiList[i].Dap_an_2 },
                    new { Letter = "C", Text = Model.CauHoiBaiThiList[i].Dap_an_3 },
                    new { Letter = "D", Text = Model.CauHoiBaiThiList[i].Dap_an_4 }

                    };
                        }

                        @* Hiển thị các đáp án với ký hiệu *@
                        @for (int j = 0; j < options.Length; j++)
                        {
                            <div>
                                <input type="radio" name="cauHoi_@Model.CauHoiBaiThiList[i].Id" value="@options[j].Text" onchange="markAsSelected(@Model.CauHoiBaiThiList[i].Id)" />
                                <label>@options[j].Letter. @options[j].Text.</label>
                            </div>
                        }

                        @* Input ẩn để đánh dấu câu hỏi đã được hiển thị *@
                        <input type="hidden" name="questionIds" value="@Model.CauHoiBaiThiList[i].Id" />
                    </div>
                }
            </form>

        </div>
    </div>
</div>

<!-- Phần thời gian và danh sách câu hỏi bên phải -->
<div style="position: fixed; top: 130px; right: 10px; width: 250px; box-shadow: 0 2px 4px rgba(0, 0, 0, .08), 0 4px 12px rgba(0, 0, 0, .08); border-radius: 10px; padding: 18px;">
    <!-- Hiển thị thời gian làm bài -->
    <div style="margin-bottom: 20px;">
        <label>Thời gian làm bài:</label>
        <div id="timer" style="font-size: 24px">00:00</div>
    </div>

    <!-- Nút nộp bài -->
    <button type="button" class="btn btn-primary mb-3 text-light rounded-3" onclick="confirmSubmission()">NỘP BÀI</button>

    <p style="color: orange; font-size: 12px;">
        Chú ý: bạn có thể click vào số thứ tự câu hỏi trong bảng để đánh dấu review
    </p>

    <!-- Danh sách câu hỏi -->
    <div>
        <label>Danh sách câu hỏi:</label>
        <div style="display: flex; flex-wrap: wrap;">
            @for (int i = 0; i < Model.CauHoiBaiThiList.Count; i++)
            {
                <button id="btn_@Model.CauHoiBaiThiList[i].Id" class="m-1 rounded-3" style="background-color: #fff;font-size: 0.75rem;width:1.75rem" onclick="scrollToQuestion(@Model.CauHoiBaiThiList[i].Id)">
                    @Model.CauHoiBaiThiList[i].Thu_tu_cau
                </button>
            }
        </div>
    </div>
</div>

<script>
    var remainingTime = 120 * 60; // 120 phút = 7200 giây
    var timerElement = document.getElementById('timer');
    var totalTime = 0;

    function startTimer() {
        var countdown = setInterval(function () {
            var minutes = Math.floor(remainingTime / 60);
            var seconds = remainingTime % 60;
            seconds = seconds < 10 ? "0" + seconds : seconds;
            minutes = minutes < 10 ? "0" + minutes : minutes;
            timerElement.textContent = minutes + ":" + seconds;

            // Tăng tổng thời gian làm bài
            totalTime++;

            // Giảm thời gian
            remainingTime--;

            // Khi hết giờ, tự động nộp bài
            if (remainingTime < 0) {
                clearInterval(countdown);
                autoSubmit();
            }
        }, 1000);
    }

    window.onload = function () {
        startTimer();
    };

    // Khi nộp bài tự động
function autoSubmit() {
    Swal.fire({
        title: "Hết thời gian!",
        text: "Bài làm của bạn sẽ được tự động nộp.",
        icon: "info",
        timer: 3000,
        timerProgressBar: true,
        didClose: () => {
            showTotalTime(); // Hiển thị tổng thời gian đã làm

            // Lấy thời gian làm bài
            var minutes = Math.floor(totalTime / 60);
            var seconds = totalTime % 60;
            var formattedTime = minutes + ":" + (seconds < 10 ? "0" + seconds : seconds);

            // Tạo input ẩn để lưu tổng thời gian vào form trước khi nộp
            var totalTimeInput = document.createElement('input');
            totalTimeInput.type = 'hidden';
            totalTimeInput.name = 'TotalTime';  // Tên này phải trùng với key trong controller
            totalTimeInput.value = formattedTime;

            var form = document.getElementById('tracNghiemForm');
            form.appendChild(totalTimeInput); // Thêm input vào form
            form.submit();
        }
    });
}



    // Hiển thị tổng thời gian đã làm bài
    function showTotalTime() {
        var minutes = Math.floor(totalTime / 60);
        var seconds = totalTime % 60;
        seconds = seconds < 10 ? "0" + seconds : seconds;
        minutes = minutes < 10 ? "0" + minutes : minutes;
        var totalTimeElement = document.getElementById('totalTime');
        if (totalTimeElement) {
            totalTimeElement.textContent = minutes + ":" + seconds;
        }
    }

  function confirmSubmission() {
    Swal.fire({
        title: "Bạn có chắc muốn nộp bài?",
        text: "Bài làm sẽ không thể thay đổi!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Nộp bài",
        cancelButtonText: "Hủy"
    }).then((result) => {
        if (result.isConfirmed) {
            Swal.fire({
                title: "Đã nộp bài!",
                text: "Bài làm của bạn đã được nộp.",
                icon: "success",
                timer: 3000,
                timerProgressBar: true,
                didClose: () => {
                    showTotalTime(); // Hiển thị tổng thời gian đã làm

                    // Lấy thời gian làm bài
                    var minutes = Math.floor(totalTime / 60);
                    var seconds = totalTime % 60;
                    var formattedTime = minutes + ":" + (seconds < 10 ? "0" + seconds : seconds);

                    // Tạo input ẩn để lưu tổng thời gian vào form trước khi nộp
                    var totalTimeInput = document.createElement('input');
                    totalTimeInput.type = 'hidden';
                    totalTimeInput.name = 'TotalTime';  // Tên này phải trùng với key trong controller
                    totalTimeInput.value = formattedTime;

                    var form = document.getElementById('tracNghiemForm');
                    form.appendChild(totalTimeInput); // Thêm input vào form
                    form.submit();
                }
            });
        }
    });
}

    function markAsSelected(questionId) {
        var button = document.getElementById('btn_' + questionId);
        if (button.style.backgroundColor === '#3b4f95') {
            button.style.backgroundColor = '#fff';
        } else {
            button.style.backgroundColor = '#3b4f95';
            button.style.color = '#fff';
        }
    }
    // Scroll tới câu hỏi khi nhấn vào nút
    function scrollToQuestion(questionId) {
        document.getElementById('question_' + questionId).scrollIntoView({ behavior: 'smooth' });
    }

</script>


