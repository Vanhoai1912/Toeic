@model ToeicWeb.Models.ViewModels.TracNghiemViewModel


<!-- Tiêu đề -->
<div class="col-12 text-center">
    <h2>@Model.BaiTap.Tieu_de</h2>
</div>

<div class="container rounded-4" style="max-width: 1220px; box-shadow: 0 2px 4px rgba(0, 0, 0, .08), 0 4px 12px rgba(0, 0, 0, .08); margin-left: -6rem;">
    <p class="mt-xxl-3">
        <span class="badge rounded-4 bg-primary mt-3">
            Part @Model.BaiTap.Part
        </span>
    </p>
    <form asp-action="ResultDetailPart6" method="post" id="tracNghiemForm">
        <input type="hidden" name="baiTapId" value="@Model.CauHoiList.FirstOrDefault()?.Ma_bai_tap_docId" />

        <!-- Vòng lặp qua các câu hỏi -->
        @foreach (var question in Model.CauHoiList)
        {
            <div class="row" style="margin-bottom: 30px;">
                
                <!-- Đường cắt ngang phía trên câu hỏi nếu có bài đọc -->
                @if (!string.IsNullOrEmpty(question.Bai_doc) && Model.BaiDocs.ContainsKey(question.Bai_doc))
                {
                    <hr style="border: 1px solid #ccc; margin-bottom: 20px;" />
                }

                <!-- Cột bên trái: Bài đọc -->
                <div class="col-md-6" style="border-right: 1px solid #ddd; padding-right: 30px;">
                    @if (!string.IsNullOrEmpty(question.Bai_doc) && Model.BaiDocs.ContainsKey(question.Bai_doc))
                    {
                        <div class="reading-passage" style="margin-top: 20px;">
                            @{
                                // Xác định vị trí của câu hiện tại trong danh sách câu hỏi
                                var startIndex = Model.CauHoiList.IndexOf(question);
                                var endIndex = startIndex; // Biến endIndex để xác định câu kết thúc

                                // Tìm câu tiếp theo có bài đọc
                                for (int i = startIndex + 1; i < Model.CauHoiList.Count; i++)
                                {
                                    if (!string.IsNullOrEmpty(Model.CauHoiList[i].Bai_doc) && Model.BaiDocs.ContainsKey(Model.CauHoiList[i].Bai_doc))
                                    {
                                        endIndex = i - 1; // Kết thúc trước câu tiếp theo có bài đọc
                                        break;
                                    }
                                }

                                // Nếu không tìm thấy câu tiếp theo có bài đọc, lấy đến cuối danh sách
                                if (endIndex == startIndex)
                                {
                                    endIndex = Model.CauHoiList.Count - 1;
                                }
                            }

                            <!-- Hiển thị phạm vi câu hỏi -->
                            <h5>Questions @question.Thu_tu_cau - @Model.CauHoiList[endIndex].Thu_tu_cau</h5>

                            <!-- Hiển thị bài đọc -->
                            <p>@Model.BaiDocs[question.Bai_doc]</p> <!-- Hiển thị nội dung bài đọc -->
                        </div>
                    }
                </div>



                <!-- Cột bên phải: Câu hỏi -->
                <div class="col-md-6" style="padding-left: 30px;">
                    <div class="question-block" id="question_@question.Id" style="padding: 10px;">
                        <p><b>@question.Thu_tu_cau. @question.Cau_hoi</b></p>

                        @{
                            var options = new[] {
                                new { Letter = "A", Text = question.Dap_an_1 },
                                new { Letter = "B", Text = question.Dap_an_2 },
                                new { Letter = "C", Text = question.Dap_an_3 },
                                new { Letter = "D", Text = question.Dap_an_4 }
                            };
                        }

                        @for (int j = 0; j < options.Length; j++)
                        {
                            <div>
                                <input type="radio" name="cauHoi_@question.Id" value="@options[j].Text" onchange="markAsSelected(@question.Id)" />
                                <label>@options[j].Letter. @options[j].Text</label>
                            </div>
                        }

                        <input type="hidden" name="questionIds" value="@question.Id" />
                    </div>
                </div>
            </div>
        }
    </form>
</div>





<!-- Phần thời gian và danh sách câu hỏi bên phải -->
<div style="position: fixed; top: 130px; right: 10px; width: 250px; box-shadow: 0 2px 4px rgba(0, 0, 0, .08), 0 4px 12px rgba(0, 0, 0, .08); border-radius: 10px; padding: 18px;">
    <!-- Hiển thị thời gian làm bài -->
    <div style="margin-bottom: 20px;">
        <label>Thời gian làm bài:</label>
        <div id="timer" style="font-size: 24px">00:00</div>
    </div>

    <!-- Nút nộp bài -->
    <button type="button" class="btn btn-primary mb-3 text-light rounded-3" onclick="confirmSubmission()">NỘP BÀI</button>

    <p style="color: orange; font-size: 12px;">
        Chú ý: bạn có thể click vào số thứ tự câu hỏi trong bảng để đánh dấu review
    </p>

    <!-- Danh sách câu hỏi -->
    <div>
        <label>Danh sách câu hỏi:</label>
        <div style="display: flex; flex-wrap: wrap;">
                @for (int i = 0; i < Model.CauHoiList.Count; i++)
                {
                <button id="btn_@Model.CauHoiList[i].Id" class="m-1 rounded-3" style="background-color: #fff;font-size: 0.75rem;" onclick="scrollToQuestion(@Model.CauHoiList[i].Id)">
                        @Model.CauHoiList[i].Thu_tu_cau
                </button>
                }
        </div>
    </div>
</div>


<script>
    var elapsedTime = 0;
    var timerElement = document.getElementById('timer');
    setInterval(function() {
        var minutes = Math.floor(elapsedTime / 60);
        var seconds = elapsedTime % 60;
        seconds = seconds < 10 ? "0" + seconds : seconds;
        minutes = minutes < 10 ? "0" + minutes : minutes;
        timerElement.textContent = minutes + ":" + seconds;
        elapsedTime++;
    }, 1000);

    // Khi trang PracticePart5 được tải, bắt đầu đồng hồ
    window.onload = function() {
        startTimer();
    };

    // Đánh dấu câu hỏi đã chọn
    function markAsSelected(questionId) {
        var button = document.getElementById('btn_' + questionId);
        if (button.style.backgroundColor === '#3b4f95') {
            button.style.backgroundColor = '#fff';
        } else {
            button.style.backgroundColor = '#3b4f95';
            button.style.color = '#fff';
        }
    }


    // Scroll tới câu hỏi khi nhấn vào nút
    function scrollToQuestion(questionId) {
        document.getElementById('question_' + questionId).scrollIntoView({ behavior: 'smooth' });
    }

    // nút nộp bài
    function confirmSubmission() {
        Swal.fire({
            title: "Bạn có chắc muốn nộp bài?",
            text: "Bài làm sẽ không thể thay đổi!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Nộp bài",
            cancelButtonText: "Hủy"
        }).then((result) => {
            if (result.isConfirmed) {
                // Hiển thị thông báo thành công với thời gian
                Swal.fire({
                    title: "Đã nộp bài!",
                    text: "Bài làm của bạn đã được nộp.",
                    icon: "success",
                    timer: 3000, // Thời gian hiển thị thông báo thành công (1500 ms = 1.5 giây)
                    timerProgressBar: true,
                    didClose: () => {
                        // Sau khi thông báo thành công bị đóng, nộp form
                        document.getElementById('tracNghiemForm').submit();
                    }
                });
            }
        });
    }
</script>

