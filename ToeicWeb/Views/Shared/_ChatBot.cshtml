<div id="chat-container">
    <div id="chat-header">Chatbot</div>
    <div id="chat-body"></div>

    <!-- Hai nút để chọn loại chat -->
    <button class="chat-option" data-chat="ai">Chat với AI</button>
    <button class="chat-option" data-chat="admin">Chat với Admin</button>

    <input type="text" id="chat-input" placeholder="Nhập tin nhắn...">
    <button id="send-btn">Gửi</button>
</div>


<style>
    #chat-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 300px;
        background: white;
        border: 1px solid #ccc;
        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);
        border-radius: 10px;
    }

    #chat-header {
        background: #007bff;
        color: white;
        padding: 10px;
        text-align: center;
        font-weight: bold;
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
    }

    #chat-body {
        height: 300px;
        overflow-y: auto;
        padding: 10px;
    }

    #chat-input {
        width: 80%;
        padding: 8px;
        border: none;
        border-top: 1px solid #ccc;
    }

    #send-btn {
        width: 20%;
        background: #007bff;
        color: white;
        border: none;
        padding: 8px;
        cursor: pointer;
    }
</style>
<script>
    let chatType = "ai"; // Mặc định chat với AI
let userId = null;
let adminMessages = [];
let aiMessages = [];

const chatHeader = document.getElementById("chat-header");
const chatBody = document.getElementById("chat-body");
const chatInput = document.getElementById("chat-input");
const sendBtn = document.getElementById("send-btn");

// Cuộn xuống cuối chat
const scrollToBottom = () => chatBody.scrollTop = chatBody.scrollHeight;

// Hiển thị tin nhắn trên giao diện
const showMessage = (sender, message, color = "black") => {
    const messageHtml = `<div style="color: ${color};"><strong>${sender}:</strong> ${message}</div>`;

    if (chatType === "admin") {
        adminMessages.push(messageHtml);
    } else {
        aiMessages.push(messageHtml);
    }

    if (chatBody.dataset.chatType === chatType) {
        chatBody.insertAdjacentHTML("beforeend", messageHtml);
        scrollToBottom();
    }
};

// Hiển thị lỗi
const showError = (message) => showMessage("Lỗi", message, "red");

// Hiển thị tin nhắn đúng loại chat
const showChatMessages = () => {
    chatBody.innerHTML = "";
    chatBody.dataset.chatType = chatType;

    chatBody.insertAdjacentHTML(
        "beforeend",
        `<p style='color: gray; text-align: center;'>Bạn đang chat với ${chatType === "admin" ? "Admin" : "AI"}.</p>`
    );

    const messages = chatType === "admin" ? adminMessages : aiMessages;
    messages.forEach(msg => chatBody.insertAdjacentHTML("beforeend", msg));

    scrollToBottom();
};

// Xử lý khi chuyển giữa AI/Admin
document.querySelectorAll(".chat-option").forEach(button => {
    button.addEventListener("click", async function () {
        chatType = this.dataset.chat;
        chatHeader.textContent = chatType === "admin" ? "Chat với Admin" : "Chatbot AI";
        chatHeader.style.backgroundColor = chatType === "admin" ? "#dc3545" : "#007bff";

        if (chatType === "admin") {
            await getUserId();
            if (!userId) {
                showChatMessages(); // Hiển thị UI mà không load tin nhắn Admin
                showError("Bạn cần đăng nhập để chat với Admin.");
                return;
            }
            await loadAdminMessages(); // Chỉ tải tin nhắn Admin nếu đã đăng nhập
        }

        showChatMessages(); // Hiển thị tin nhắn phù hợp với loại chat
    });
});

// Gửi tin nhắn
const sendMessage = async () => {
    const input = chatInput.value.trim();
    if (input === "") return;

    showMessage("Bạn", input);
    chatInput.value = "";

    try {
        const response = await fetch(`/customer/api/chat/send/${chatType}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ messageText: input })
        });

        const body = await response.json();

        if (!response.ok) {
            showError(body?.error || "Đã xảy ra lỗi.");
            return;
        }

        if (body.reply?.trim()) {
            showMessage(chatType === "admin" ? "Admin" : "AI", body.reply);
        } else if (body.success) {
            setTimeout(() => showMessage("Hệ thống", "Tin nhắn đã gửi thành công.", "gray"), 1000);
        } else {
            showError("Không nhận được phản hồi.");
        }
    } catch (error) {
        showError("Không thể kết nối đến server.");
    }
};

// Lấy userId
const getUserId = async () => {
    try {
        const response = await fetch("/customer/api/chat");
        const data = await response.json();

        if (response.status === 401) throw new Error("Bạn chưa đăng nhập.");
        if (!data.userId) throw new Error("Không lấy được userId.");

        userId = data.userId;
    } catch (error) {
        userId = null; // Reset userId nếu có lỗi
    }
};

// Tải tin nhắn với Admin
const loadAdminMessages = async () => {
    try {
        const response = await fetch("/customer/api/chat");
        if (response.status === 401) {
            showError("Bạn cần đăng nhập để xem tin nhắn với Admin.");
            return;
        }

        const data = await response.json();
        if (!data.userId) throw new Error("Không lấy được userId.");
        userId = data.userId;

        if (!Array.isArray(data.messages)) return;

        adminMessages = data.messages.map(msg => {
            const sender = msg.senderId === userId ? "Bạn" : "Admin";
            return `<div style="color: black;"><strong>${sender}:</strong> ${msg.messageText}</div>`;
        });

        if (chatType === "admin") {
            showChatMessages();
        }
    } catch (error) {
        showError(error.message);
    }
};

// Xử lý khi bấm gửi
sendBtn.addEventListener("click", sendMessage);
chatInput.addEventListener("keypress", (e) => {
    if (e.key === "Enter") sendMessage();
});

// Tự động tải tin nhắn AI khi trang load
window.onload = showChatMessages;

</script>








